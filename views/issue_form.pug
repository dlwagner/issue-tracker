extends layout

block content
  h1= title

  form(method='POST' action='')
    div.form-group
      label(for='title') Title:
      input#title.form-control(type='text', placeholder='Title' name='title' required='true' value=(undefined===issue ? '' : issue.title))
    div.form-group
      label(for='description') Description:
      textarea#description.form-control(type='textarea', placeholder='Description' name='description' rows='3' required='true') #{undefined===issue ? '' : issue.description}
    div.form-group
      label(for='source_url') Source URL:
      input#source_url.form-control(type='text', placeholder='Source URL' name='source_url' value=(undefined===issue ? '' : issue.source_url))
    div.form-group
      label(for='steps_to_reproduce') Steps to reproduce:
      textarea#steps_to_reproduce.form-control(type='textarea', placeholder='Steps to reproduce' name='steps_to_reproduce' rows='3') #{undefined===issue ? '' : issue.steps_to_reproduce}
    div.form-group
      label(for='expected_results') Expected results:
      textarea#expected_results.form-control(type='textarea', placeholder='Expected results' name='expected_results' rows='3') #{undefined===issue ? '' : issue.expected_results}
    div.form-group
      label(for='actual_results') Actual results:
      textarea#actual_results.form-control(type='textarea', placeholder='Actual results' name='actual_results' rows='3') #{undefined===issue ? '' : issue.actual_results}
    div.form-group
      label(for='label') Label:
      select#label.form-control(type='select', placeholder='Select label' name='label')
        - labels.sort(function(a, b) {let textA = a.label.toUpperCase(); let textB = b.label.toUpperCase(); return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;});
        for label in labels
          if issue
            //- Handle GET form, where issue.label is an object, and POST form, where it is a string.
            option(
              value=label._id
              selected=(
                label._id.toString()==issue.label._id
                || label._id.toString()==issue.label
              ) ? 'selected' : false
            ) #{label.name}
          else
            option(value=label._id) #{label.name}
    div.form-group
      label(for='status') Status:
      select#status.form-control(type='select', placeholder='Select status' name='status' required='true' )
        - statuses.sort(function(a, b) {let textA = a.status.toUpperCase(); let textB = b.status.toUpperCase(); return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;});
        for status in statuses
          if issue
            //- Handle GET form, where issue.status is an object, and POST form, where it is a string.
            option(
              value=status._id
              selected=(
                status._id.toString()==issue.status._id
                || status._id.toString()==issue.status
              ) ? 'selected' : false
            ) #{status.name}
          else
            option(value=status._id) #{status.name}
    div.form-group
      label(for='priority') Priority:
      select#priority.form-control(type='select', placeholder='Select priority' name='priority' required='true' )
        - priorities.sort(function(a, b) {let textA = a.priority.toUpperCase(); let textB = b.priority.toUpperCase(); return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;});
        for priority in priorities
          if issue
            //- Handle GET form, where issue.priority is an object, and POST form, where it is a string.
            option(
              value=priority._id
              selected=(
                priority._id.toString()==issue.priority._id
                || priority._id.toString()==issue.priority
              ) ? 'selected' : false
            ) #{priority.name}
          else
            option(value=priority._id) #{priority.name}
    div.form-group
      label(for='severity') Severity:
      select#severity.form-control(type='select', placeholder='Select severity' name='severity' required='true' )
        - severities.sort(function(a, b) {let textA = a.severity.toUpperCase(); let textB = b.severity.toUpperCase(); return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;});
        for severity in severities
          if issue
            //- Handle GET form, where issue.severity is an object, and POST form, where it is a string.
            option(
              value=severity._id
              selected=(
                severity._id.toString()==issue.severity._id
                || severity._id.toString()==issue.severity
              ) ? 'selected' : false
            ) #{severity.name}
          else
            option(value=severity._id) #{severity.name}
    div.form-group
      label(for='environment') Environment:
      select#environment.form-control(type='select', placeholder='Select environment' name='environment' )
        - environments.sort(function(a, b) {let textA = a.environment.toUpperCase(); let textB = b.environment.toUpperCase(); return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;});
        for environment in environments
          if issue
            //- Handle GET form, where issue.environment is an object, and POST form, where it is a string.
            option(
              value=environment._id
              selected=(
                environment._id.toString()==issue.environment._id
                || environment._id.toString()==issue.environment
              ) ? 'selected' : false
            ) #{environment.name}
          else
            option(value=environment._id) #{environment.name}
    div.form-group
      label(for='reporter') Reporter:
      select#reporter.form-control(type='select', placeholder='Select reporter' name='reporter' required='true' )
        - reporters.sort(function(a, b) {let textA = a.last_name.toUpperCase(); let textB = b.last_name.toUpperCase(); return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;});
        for reporter in reporters
          if issue
            //- Handle GET form, where issue.reporter is an object, and POST form, where it is a string.
            option(
              value=reporter._id
              selected=(
                reporter._id.toString()==issue.reporter._id
                || reporter._id.toString()==issue.reporter
              ) ? 'selected' : false
            ) #{reporter.name}
          else
            option(value=reporter._id) #{reporter.name}
    div.form-group
      label(for='assignee') Assigned to:
      select#assignee.form-control(type='select', placeholder='Select assignee' name='assignee' )
        - assignees.sort(function(a, b) {let textA = a.last_name.toUpperCase(); let textB = b.last_name.toUpperCase(); return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;});
        for assignee in assignees
          if issue
            //- Handle GET form, where issue.assignee is an object, and POST form, where it is a string.
            option(
              value=assignee._id
              selected=(
                assignee._id.toString()==issue.assignee._id
                || assignee._id.toString()==issue.assignee
              ) ? 'selected' : false
            ) #{assignee.name}
          else
            option(value=assignee._id) #{assignee.name}
    div.form-group
      label(for='created') Date Created:
      input#created.form-control(type='date' name='created' value=(undefined===issue ? '' : issue.created_yyyy_mm_dd) )
    div.form-group
      label(for='due_date') Due date:
      input#due_date.form-control(type='date' name='due_date' value=(undefined===issue ? '' : issue.duedate_yyyy_mm_dd) )
    

    button.btn.btn-primary(type='submit') Submit

  if errors 
    ul
      for error in errors
        li!= error.msg